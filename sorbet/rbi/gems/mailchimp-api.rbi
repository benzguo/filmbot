# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/mailchimp-api/all/mailchimp-api.rbi
#
# mailchimp-api-2.0.6
module Mailchimp
end
class Mailchimp::Folders
  def add(name, type); end
  def del(fid, type); end
  def initialize(master); end
  def list(type); end
  def master; end
  def master=(arg0); end
  def update(fid, name, type); end
end
class Mailchimp::Templates
  def add(name, html, folder_id = nil); end
  def del(template_id); end
  def info(template_id, type = nil); end
  def initialize(master); end
  def list(types = nil, filters = nil); end
  def master; end
  def master=(arg0); end
  def undel(template_id); end
  def update(template_id, values); end
end
class Mailchimp::Users
  def initialize(master); end
  def invite(email, role = nil, msg = nil); end
  def invite_resend(email); end
  def invite_revoke(email); end
  def invites; end
  def login_revoke(username); end
  def logins; end
  def master; end
  def master=(arg0); end
  def profile; end
end
class Mailchimp::Helper
  def account_details(exclude = nil); end
  def campaigns_for_email(email, options = nil); end
  def chimp_chatter; end
  def generate_text(type, content); end
  def initialize(master); end
  def inline_css(html, strip_css = nil); end
  def lists_for_email(email); end
  def master; end
  def master=(arg0); end
  def ping; end
  def search_campaigns(query, offset = nil, snip_start = nil, snip_end = nil); end
  def search_members(query, id = nil, offset = nil); end
  def verified_domains; end
end
class Mailchimp::Mobile
  def initialize(master); end
  def master; end
  def master=(arg0); end
end
class Mailchimp::Conversations
  def initialize(master); end
  def list(list_id = nil, leid = nil, campaign_id = nil, start = nil, limit = nil); end
  def master; end
  def master=(arg0); end
  def messages(conversation_id, mark_as_read = nil, start = nil, limit = nil); end
  def reply(conversation_id, message); end
end
class Mailchimp::Ecomm
  def initialize(master); end
  def master; end
  def master=(arg0); end
  def order_add(order); end
  def order_del(store_id, order_id); end
  def orders(cid = nil, start = nil, limit = nil, since = nil); end
end
class Mailchimp::Neapolitan
  def initialize(master); end
  def master; end
  def master=(arg0); end
end
class Mailchimp::Lists
  def abuse_reports(id, start = nil, limit = nil, since = nil); end
  def activity(id); end
  def batch_subscribe(id, batch, double_optin = nil, update_existing = nil, replace_interests = nil); end
  def batch_unsubscribe(id, batch, delete_member = nil, send_goodbye = nil, send_notify = nil); end
  def clients(id); end
  def growth_history(id = nil); end
  def initialize(master); end
  def interest_group_add(id, group_name, grouping_id = nil); end
  def interest_group_del(id, group_name, grouping_id = nil); end
  def interest_group_update(id, old_name, new_name, grouping_id = nil); end
  def interest_grouping_add(id, name, type, groups); end
  def interest_grouping_del(grouping_id); end
  def interest_grouping_update(grouping_id, name, value); end
  def interest_groupings(id, counts = nil); end
  def list(filters = nil, start = nil, limit = nil, sort_field = nil, sort_dir = nil); end
  def locations(id); end
  def master; end
  def master=(arg0); end
  def member_activity(id, emails); end
  def member_info(id, emails); end
  def members(id, status = nil, opts = nil); end
  def merge_var_add(id, tag, name, options = nil); end
  def merge_var_del(id, tag); end
  def merge_var_reset(id, tag); end
  def merge_var_set(id, tag, value); end
  def merge_var_update(id, tag, options); end
  def merge_vars(id); end
  def segment_add(id, opts); end
  def segment_del(id, seg_id); end
  def segment_test(list_id, options); end
  def segment_update(id, seg_id, opts); end
  def segments(id, type = nil); end
  def static_segment_add(id, name); end
  def static_segment_del(id, seg_id); end
  def static_segment_members_add(id, seg_id, batch); end
  def static_segment_members_del(id, seg_id, batch); end
  def static_segment_reset(id, seg_id); end
  def static_segments(id, get_counts = nil, start = nil, limit = nil); end
  def subscribe(id, email, merge_vars = nil, email_type = nil, double_optin = nil, update_existing = nil, replace_interests = nil, send_welcome = nil); end
  def unsubscribe(id, email, delete_member = nil, send_goodbye = nil, send_notify = nil); end
  def update_member(id, email, merge_vars, email_type = nil, replace_interests = nil); end
  def webhook_add(id, url, actions = nil, sources = nil); end
  def webhook_del(id, url); end
  def webhooks(id); end
end
class Mailchimp::Campaigns
  def content(cid, options = nil); end
  def create(type, options, content, segment_opts = nil, type_opts = nil); end
  def delete(cid); end
  def initialize(master); end
  def list(filters = nil, start = nil, limit = nil, sort_field = nil, sort_dir = nil); end
  def master; end
  def master=(arg0); end
  def pause(cid); end
  def ready(cid); end
  def replicate(cid); end
  def resume(cid); end
  def schedule(cid, schedule_time, schedule_time_b = nil); end
  def schedule_batch(cid, schedule_time, num_batches = nil, stagger_mins = nil); end
  def segment_test(list_id, options); end
  def send(cid); end
  def send_test(cid, test_emails = nil, send_type = nil); end
  def template_content(cid); end
  def unschedule(cid); end
  def update(cid, name, value); end
end
class Mailchimp::Vip
  def activity; end
  def add(id, emails); end
  def del(id, emails); end
  def initialize(master); end
  def master; end
  def master=(arg0); end
  def members; end
end
class Mailchimp::Reports
  def abuse(cid, opts = nil); end
  def advice(cid); end
  def bounce_message(cid, email); end
  def bounce_messages(cid, opts = nil); end
  def click_detail(cid, tid, opts = nil); end
  def clicks(cid); end
  def domain_performance(cid); end
  def ecomm_orders(cid, opts = nil); end
  def eepurl(cid); end
  def geo_opens(cid); end
  def google_analytics(cid); end
  def initialize(master); end
  def master; end
  def master=(arg0); end
  def member_activity(cid, emails); end
  def not_opened(cid, opts = nil); end
  def opened(cid, opts = nil); end
  def sent_to(cid, opts = nil); end
  def share(cid, opts = nil); end
  def summary(cid); end
  def unsubscribes(cid, opts = nil); end
end
class Mailchimp::Gallery
  def add_file_to_folder(file_id, folder_id); end
  def add_folder(name); end
  def initialize(master); end
  def list(opts = nil); end
  def list_folders(opts = nil); end
  def master; end
  def master=(arg0); end
  def remove_all_files_from_folder(folder_id); end
  def remove_file_from_folder(file_id, folder_id); end
  def remove_folder(folder_id); end
end
class Mailchimp::Goal
  def events(list_id, email, start = nil, limit = nil); end
  def initialize(master); end
  def master; end
  def master=(arg0); end
  def record_event(list_id, email, campaign_id, event); end
end
